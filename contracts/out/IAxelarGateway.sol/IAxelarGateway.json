{"abi":[{"type":"function","name":"callContract","inputs":[{"name":"destinationChain","type":"string","internalType":"string"},{"name":"contractAddress","type":"string","internalType":"string"},{"name":"payload","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"isCommandExecuted","inputs":[{"name":"commandId","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isContractCallApproved","inputs":[{"name":"commandId","type":"bytes32","internalType":"bytes32"},{"name":"sourceChain","type":"string","internalType":"string"},{"name":"sourceAddress","type":"string","internalType":"string"},{"name":"contractAddress","type":"address","internalType":"address"},{"name":"payloadHash","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"validateContractCall","inputs":[{"name":"commandId","type":"bytes32","internalType":"bytes32"},{"name":"sourceChain","type":"string","internalType":"string"},{"name":"sourceAddress","type":"string","internalType":"string"},{"name":"payloadHash","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"event","name":"ContractCall","inputs":[{"name":"sender","type":"address","indexed":true,"internalType":"address"},{"name":"destinationChain","type":"string","indexed":false,"internalType":"string"},{"name":"destinationContractAddress","type":"string","indexed":false,"internalType":"string"},{"name":"payloadHash","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"payload","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"callContract(string,string,bytes)":"1c92115f","isCommandExecuted(bytes32)":"d26ff210","isContractCallApproved(bytes32,string,string,address,bytes32)":"f6a5f9f5","validateContractCall(bytes32,string,string,bytes32)":"5f6970c3"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.29+commit.ab55807c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"destinationChain\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"destinationContractAddress\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"ContractCall\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"destinationChain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractAddress\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"callContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commandId\",\"type\":\"bytes32\"}],\"name\":\"isCommandExecuted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commandId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"sourceChain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sourceAddress\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"}],\"name\":\"isContractCallApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commandId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"sourceChain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sourceAddress\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"payloadHash\",\"type\":\"bytes32\"}],\"name\":\"validateContractCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the Axelar Gateway that supports general message passing and contract call execution.\",\"events\":{\"ContractCall(address,string,string,bytes32,bytes)\":{\"details\":\"Logs the attempt to call a contract on another chain.\",\"params\":{\"destinationChain\":\"The name of the destination chain.\",\"destinationContractAddress\":\"The address of the contract on the destination chain.\",\"payload\":\"The payload data used for the contract call.\",\"payloadHash\":\"The keccak256 hash of the sent payload data.\",\"sender\":\"The address of the sender who initiated the contract call.\"}}},\"kind\":\"dev\",\"methods\":{\"callContract(string,string,bytes)\":{\"details\":\"Initiates a cross-chain contract call through the gateway to the specified destination chain and contract.\",\"params\":{\"contractAddress\":\"The address of the contract on the destination chain.\",\"destinationChain\":\"The name of the destination chain.\",\"payload\":\"The payload data to be used in the contract call.\"}},\"isCommandExecuted(bytes32)\":{\"details\":\"Determines whether a command, identified by the commandId, has been executed.\",\"params\":{\"commandId\":\"The identifier of the command to check.\"},\"returns\":{\"_0\":\"True if the command has been executed, false otherwise.\"}},\"isContractCallApproved(bytes32,string,string,address,bytes32)\":{\"details\":\"Determines whether a given contract call, identified by the commandId and payloadHash, is approved.\",\"params\":{\"commandId\":\"The identifier of the command to check.\",\"contractAddress\":\"The address of the contract where the call will be executed.\",\"payloadHash\":\"The keccak256 hash of the payload data.\",\"sourceAddress\":\"The address of the sender on the source chain.\",\"sourceChain\":\"The name of the source chain.\"},\"returns\":{\"_0\":\"True if the contract call is approved, false otherwise.\"}},\"validateContractCall(bytes32,string,string,bytes32)\":{\"details\":\"Validates the given contract call information and marks it as approved if valid.\",\"params\":{\"commandId\":\"The identifier of the command to validate.\",\"payloadHash\":\"The keccak256 hash of the payload data.\",\"sourceAddress\":\"The address of the sender on the source chain.\",\"sourceChain\":\"The name of the source chain.\"},\"returns\":{\"_0\":\"True if the contract call is validated and approved, false otherwise.\"}}},\"title\":\"IAxelarGateway\",\"version\":1},\"userdoc\":{\"events\":{\"ContractCall(address,string,string,bytes32,bytes)\":{\"notice\":\"Emitted when a contract call is made through the gateway.\"}},\"kind\":\"user\",\"methods\":{\"callContract(string,string,bytes)\":{\"notice\":\"Sends a contract call to another chain.\"},\"isCommandExecuted(bytes32)\":{\"notice\":\"Checks if a command has been executed.\"},\"isContractCallApproved(bytes32,string,string,address,bytes32)\":{\"notice\":\"Checks if a contract call is approved.\"},\"validateContractCall(bytes32,string,string,bytes32)\":{\"notice\":\"Validates and approves a contract call.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGateway.sol\":\"IAxelarGateway\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":axelar-gmp-sdk-solidity/=lib/axelar-gmp-sdk-solidity/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGateway.sol\":{\"keccak256\":\"0xbd92798eade563d8a663db59f6f04db5acdee5beda3a6d091e44a7d5c6b2f68e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1519882aed7b6de2ee1e316e5188d2bda1e305fc18a96b3895831f49dc9f90b0\",\"dweb:/ipfs/QmYTLwLGwmDkyX6GSE6PU93TkWP5mFz8qhmFyBrWfj6gaB\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.29+commit.ab55807c"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address","indexed":true},{"internalType":"string","name":"destinationChain","type":"string","indexed":false},{"internalType":"string","name":"destinationContractAddress","type":"string","indexed":false},{"internalType":"bytes32","name":"payloadHash","type":"bytes32","indexed":true},{"internalType":"bytes","name":"payload","type":"bytes","indexed":false}],"type":"event","name":"ContractCall","anonymous":false},{"inputs":[{"internalType":"string","name":"destinationChain","type":"string"},{"internalType":"string","name":"contractAddress","type":"string"},{"internalType":"bytes","name":"payload","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"callContract"},{"inputs":[{"internalType":"bytes32","name":"commandId","type":"bytes32"}],"stateMutability":"view","type":"function","name":"isCommandExecuted","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"bytes32","name":"commandId","type":"bytes32"},{"internalType":"string","name":"sourceChain","type":"string"},{"internalType":"string","name":"sourceAddress","type":"string"},{"internalType":"address","name":"contractAddress","type":"address"},{"internalType":"bytes32","name":"payloadHash","type":"bytes32"}],"stateMutability":"view","type":"function","name":"isContractCallApproved","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"bytes32","name":"commandId","type":"bytes32"},{"internalType":"string","name":"sourceChain","type":"string"},{"internalType":"string","name":"sourceAddress","type":"string"},{"internalType":"bytes32","name":"payloadHash","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"validateContractCall","outputs":[{"internalType":"bool","name":"","type":"bool"}]}],"devdoc":{"kind":"dev","methods":{"callContract(string,string,bytes)":{"details":"Initiates a cross-chain contract call through the gateway to the specified destination chain and contract.","params":{"contractAddress":"The address of the contract on the destination chain.","destinationChain":"The name of the destination chain.","payload":"The payload data to be used in the contract call."}},"isCommandExecuted(bytes32)":{"details":"Determines whether a command, identified by the commandId, has been executed.","params":{"commandId":"The identifier of the command to check."},"returns":{"_0":"True if the command has been executed, false otherwise."}},"isContractCallApproved(bytes32,string,string,address,bytes32)":{"details":"Determines whether a given contract call, identified by the commandId and payloadHash, is approved.","params":{"commandId":"The identifier of the command to check.","contractAddress":"The address of the contract where the call will be executed.","payloadHash":"The keccak256 hash of the payload data.","sourceAddress":"The address of the sender on the source chain.","sourceChain":"The name of the source chain."},"returns":{"_0":"True if the contract call is approved, false otherwise."}},"validateContractCall(bytes32,string,string,bytes32)":{"details":"Validates the given contract call information and marks it as approved if valid.","params":{"commandId":"The identifier of the command to validate.","payloadHash":"The keccak256 hash of the payload data.","sourceAddress":"The address of the sender on the source chain.","sourceChain":"The name of the source chain."},"returns":{"_0":"True if the contract call is validated and approved, false otherwise."}}},"version":1},"userdoc":{"kind":"user","methods":{"callContract(string,string,bytes)":{"notice":"Sends a contract call to another chain."},"isCommandExecuted(bytes32)":{"notice":"Checks if a command has been executed."},"isContractCallApproved(bytes32,string,string,address,bytes32)":{"notice":"Checks if a contract call is approved."},"validateContractCall(bytes32,string,string,bytes32)":{"notice":"Validates and approves a contract call."}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","axelar-gmp-sdk-solidity/=lib/axelar-gmp-sdk-solidity/contracts/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGateway.sol":"IAxelarGateway"},"evmVersion":"prague","libraries":{}},"sources":{"lib/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGateway.sol":{"keccak256":"0xbd92798eade563d8a663db59f6f04db5acdee5beda3a6d091e44a7d5c6b2f68e","urls":["bzz-raw://1519882aed7b6de2ee1e316e5188d2bda1e305fc18a96b3895831f49dc9f90b0","dweb:/ipfs/QmYTLwLGwmDkyX6GSE6PU93TkWP5mFz8qhmFyBrWfj6gaB"],"license":"MIT"}},"version":1},"id":5}