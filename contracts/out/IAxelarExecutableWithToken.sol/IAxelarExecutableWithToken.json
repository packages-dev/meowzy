{"abi":[{"type":"function","name":"execute","inputs":[{"name":"commandId","type":"bytes32","internalType":"bytes32"},{"name":"sourceChain","type":"string","internalType":"string"},{"name":"sourceAddress","type":"string","internalType":"string"},{"name":"payload","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"executeWithToken","inputs":[{"name":"commandId","type":"bytes32","internalType":"bytes32"},{"name":"sourceChain","type":"string","internalType":"string"},{"name":"sourceAddress","type":"string","internalType":"string"},{"name":"payload","type":"bytes","internalType":"bytes"},{"name":"tokenSymbol","type":"string","internalType":"string"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"gateway","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IAxelarGateway"}],"stateMutability":"view"},{"type":"error","name":"InvalidAddress","inputs":[]},{"type":"error","name":"NotApprovedByGateway","inputs":[]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"execute(bytes32,string,string,bytes)":"49160658","executeWithToken(bytes32,string,string,bytes,string,uint256)":"1a98b2e0","gateway()":"116191b6"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.29+commit.ab55807c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotApprovedByGateway\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commandId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"sourceChain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sourceAddress\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commandId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"sourceChain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sourceAddress\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"executeWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gateway\",\"outputs\":[{\"internalType\":\"contract IAxelarGateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for a contract that can execute commands from Axelar Gateway involving token transfers. It extends IAxelarExecutable to include token-related functionality.\",\"errors\":{\"InvalidAddress()\":[{\"details\":\"Thrown when a function is called with an invalid address.\"}],\"NotApprovedByGateway()\":[{\"details\":\"Thrown when the call is not approved by the Axelar Gateway.\"}]},\"kind\":\"dev\",\"methods\":{\"execute(bytes32,string,string,bytes)\":{\"details\":\"This function is called by the Axelar Gateway to carry out cross-chain commands. Reverts if the call is not approved by the gateway or other checks fail.\",\"params\":{\"commandId\":\"The identifier of the command to execute.\",\"payload\":\"The payload of the command to be executed. This typically includes the function selector and encoded arguments.\",\"sourceAddress\":\"The address on the source chain that sent the command.\",\"sourceChain\":\"The name of the source chain from where the command originated.\"}},\"executeWithToken(bytes32,string,string,bytes,string,uint256)\":{\"details\":\"This function should be implemented to handle incoming commands that include token transfers. It will be called by an implementation of `IAxelarGatewayWithToken`.\",\"params\":{\"amount\":\"The amount of tokens to be transferred with this command.\",\"commandId\":\"The identifier of the command to execute.\",\"payload\":\"The payload of the command to be executed.\",\"sourceAddress\":\"The address on the source chain that sent the command.\",\"sourceChain\":\"The name of the source chain from where the command originated.\",\"tokenSymbol\":\"The symbol of the token to be transferred with this command.\"}},\"gateway()\":{\"returns\":{\"_0\":\"The Axelar Gateway contract associated with this executable contract.\"}}},\"title\":\"IAxelarExecutableWithToken\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"execute(bytes32,string,string,bytes)\":{\"notice\":\"Executes the specified command sent from another chain.\"},\"executeWithToken(bytes32,string,string,bytes,string,uint256)\":{\"notice\":\"Executes the specified command sent from another chain and includes a token transfer.\"},\"gateway()\":{\"notice\":\"Returns the address of the AxelarGateway contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarExecutableWithToken.sol\":\"IAxelarExecutableWithToken\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":axelar-gmp-sdk-solidity/=lib/axelar-gmp-sdk-solidity/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarExecutable.sol\":{\"keccak256\":\"0xc62de7533d4891bfd5bd8792e6638cb1d3ff4389dee2ce1f1dc8de235a057daa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f934a6afcebde328dbf271af65a24370618f173c65f705739fb16e7f99195c15\",\"dweb:/ipfs/QmZ61TPX1wPk3UDhpGxktTdYvgei3kBG1iCMYLt99ANwhN\"]},\"lib/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarExecutableWithToken.sol\":{\"keccak256\":\"0xb7b64f45abc062dca252a2a814361443cb08b0edcddd7944d5c701cc21d7a4c4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e4a4801d60ad0a2ffa4feeedcbf855a28d0bed45b1560b0c8d03b8b1843c6cfb\",\"dweb:/ipfs/QmVh5gYL76UDpeDLfEdMUhL8dfhW6p6bJUMgdRxn74vN93\"]},\"lib/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGateway.sol\":{\"keccak256\":\"0xbd92798eade563d8a663db59f6f04db5acdee5beda3a6d091e44a7d5c6b2f68e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1519882aed7b6de2ee1e316e5188d2bda1e305fc18a96b3895831f49dc9f90b0\",\"dweb:/ipfs/QmYTLwLGwmDkyX6GSE6PU93TkWP5mFz8qhmFyBrWfj6gaB\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.29+commit.ab55807c"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"InvalidAddress"},{"inputs":[],"type":"error","name":"NotApprovedByGateway"},{"inputs":[{"internalType":"bytes32","name":"commandId","type":"bytes32"},{"internalType":"string","name":"sourceChain","type":"string"},{"internalType":"string","name":"sourceAddress","type":"string"},{"internalType":"bytes","name":"payload","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"execute"},{"inputs":[{"internalType":"bytes32","name":"commandId","type":"bytes32"},{"internalType":"string","name":"sourceChain","type":"string"},{"internalType":"string","name":"sourceAddress","type":"string"},{"internalType":"bytes","name":"payload","type":"bytes"},{"internalType":"string","name":"tokenSymbol","type":"string"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"executeWithToken"},{"inputs":[],"stateMutability":"view","type":"function","name":"gateway","outputs":[{"internalType":"contract IAxelarGateway","name":"","type":"address"}]}],"devdoc":{"kind":"dev","methods":{"execute(bytes32,string,string,bytes)":{"details":"This function is called by the Axelar Gateway to carry out cross-chain commands. Reverts if the call is not approved by the gateway or other checks fail.","params":{"commandId":"The identifier of the command to execute.","payload":"The payload of the command to be executed. This typically includes the function selector and encoded arguments.","sourceAddress":"The address on the source chain that sent the command.","sourceChain":"The name of the source chain from where the command originated."}},"executeWithToken(bytes32,string,string,bytes,string,uint256)":{"details":"This function should be implemented to handle incoming commands that include token transfers. It will be called by an implementation of `IAxelarGatewayWithToken`.","params":{"amount":"The amount of tokens to be transferred with this command.","commandId":"The identifier of the command to execute.","payload":"The payload of the command to be executed.","sourceAddress":"The address on the source chain that sent the command.","sourceChain":"The name of the source chain from where the command originated.","tokenSymbol":"The symbol of the token to be transferred with this command."}},"gateway()":{"returns":{"_0":"The Axelar Gateway contract associated with this executable contract."}}},"version":1},"userdoc":{"kind":"user","methods":{"execute(bytes32,string,string,bytes)":{"notice":"Executes the specified command sent from another chain."},"executeWithToken(bytes32,string,string,bytes,string,uint256)":{"notice":"Executes the specified command sent from another chain and includes a token transfer."},"gateway()":{"notice":"Returns the address of the AxelarGateway contract."}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","axelar-gmp-sdk-solidity/=lib/axelar-gmp-sdk-solidity/contracts/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarExecutableWithToken.sol":"IAxelarExecutableWithToken"},"evmVersion":"prague","libraries":{}},"sources":{"lib/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarExecutable.sol":{"keccak256":"0xc62de7533d4891bfd5bd8792e6638cb1d3ff4389dee2ce1f1dc8de235a057daa","urls":["bzz-raw://f934a6afcebde328dbf271af65a24370618f173c65f705739fb16e7f99195c15","dweb:/ipfs/QmZ61TPX1wPk3UDhpGxktTdYvgei3kBG1iCMYLt99ANwhN"],"license":"MIT"},"lib/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarExecutableWithToken.sol":{"keccak256":"0xb7b64f45abc062dca252a2a814361443cb08b0edcddd7944d5c701cc21d7a4c4","urls":["bzz-raw://e4a4801d60ad0a2ffa4feeedcbf855a28d0bed45b1560b0c8d03b8b1843c6cfb","dweb:/ipfs/QmVh5gYL76UDpeDLfEdMUhL8dfhW6p6bJUMgdRxn74vN93"],"license":"MIT"},"lib/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGateway.sol":{"keccak256":"0xbd92798eade563d8a663db59f6f04db5acdee5beda3a6d091e44a7d5c6b2f68e","urls":["bzz-raw://1519882aed7b6de2ee1e316e5188d2bda1e305fc18a96b3895831f49dc9f90b0","dweb:/ipfs/QmYTLwLGwmDkyX6GSE6PU93TkWP5mFz8qhmFyBrWfj6gaB"],"license":"MIT"}},"version":1},"id":3}